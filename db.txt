CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    address TEXT
);

CREATE INDEX idx_users_phone ON users(phone);

CREATE TABLE riders (
    rider_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    vehicle_type VARCHAR(50),
    rating FLOAT,
    rider_status ENUM('online', 'offline', 'resting'), -- 骑手状态（如在线、休息、离线）
    latitude DOUBLE,                                   -- 骑手纬度
    longitude DOUBLE,                                  -- 骑手经度
    INDEX(`latitude`, `longitude`),                    -- 创建经纬度索引
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE INDEX idx_riders_user_id ON riders(user_id);
CREATE SPATIAL INDEX idx_location ON riders(latitude, longitude);

CREATE TABLE shops (
    shop_id INT PRIMARY KEY AUTO_INCREMENT,
    shop_name VARCHAR(255) NOT NULL,
    shop_password VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    address TEXT,
    description TEXT
    latitude DOUBLE,                                  -- 商家纬度
    longitude DOUBLE,                                 -- 商家经度
    INDEX(`latitude`, `longitude`)                    -- 创建经纬度索引
);

CREATE INDEX idx_shops_phone ON shops(phone);
CREATE SPATIAL INDEX idx_location ON shops(latitude, longitude);
示例：需要查询 5 公里以内的商家
SELECT shop_id, shop_name, latitude, longitude,
       (6371 * acos( cos( radians(?) ) * cos( radians(latitude) ) *
       cos( radians(longitude) - radians(?) ) + sin( radians(?) ) *
       sin( radians(latitude) ) ) ) AS distance
FROM shops
HAVING distance < 5
ORDER BY distance
LIMIT 10;

CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    shop_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price FLOAT NOT NULL,
    stock INT NOT NULL,
    FOREIGN KEY (shop_id) REFERENCES shops(shop_id)
);

CREATE INDEX idx_products_shop_id ON products(shop_id);
CREATE INDEX idx_products_product_name ON products(product_name);

CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    shop_id INT NOT NULL,
    rider_id INT,
    product_id INT NOT NULL,
    order_status VARCHAR(50) NOT NULL,
    order_time TIMESTAMP NOT NULL,
    total_price FLOAT NOT NULL,
    group_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (shop_id) REFERENCES shops(shop_id),
    FOREIGN KEY (rider_id) REFERENCES riders(rider_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_shop_id ON orders(shop_id);
CREATE INDEX idx_orders_rider_id ON orders(rider_id);
CREATE INDEX idx_orders_product_id ON orders(product_id);

CREATE TABLE `groups` (
    group_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    user_id INT NOT NULL,
    shop_id INT NOT NULL,
    rider_id INT,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (shop_id) REFERENCES shops(shop_id),
    FOREIGN KEY (rider_id) REFERENCES riders(rider_id)
);

CREATE INDEX idx_groups_order_id ON groups(order_id);
CREATE INDEX idx_groups_user_id ON groups(user_id);
CREATE INDEX idx_groups_shop_id ON groups(shop_id);
CREATE INDEX idx_groups_rider_id ON groups(rider_id);

CREATE TABLE messages (
    message_id INT PRIMARY KEY AUTO_INCREMENT,
    group_id INT NOT NULL,
    sender_id INT NOT NULL,
    content TEXT NOT NULL,
    timestamp TIMESTAMP NOT NULL,
    FOREIGN KEY (group_id) REFERENCES groups(group_id),
    FOREIGN KEY (sender_id) REFERENCES users(user_id)
);
//索引
CREATE INDEX idx_messages_group_id ON messages(group_id);
CREATE INDEX idx_messages_sender_id ON messages(sender_id);
CREATE INDEX idx_messages_timestamp ON messages(timestamp);

//秒杀表
CREATE TABLE seckill_products (
    seckill_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    total_stock INT NOT NULL,
    seckill_stock INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);